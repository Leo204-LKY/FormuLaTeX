# Automatically update version in package.json and generate package for
# Windows, Linux, and macOS, and upload to draft release on GitHub
# when tagging a new release.

name: Draft Release on Tag

on:
  push:
    tags:
      - 'v*.*.*' # Only match semantic versioning tags like v1.0.0

jobs:
  check-tag:
    name: Check if Tag Matches Package Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag and branch
        id: info
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          TAG_NAME=${GITHUB_REF#refs/tags/}
          BRANCH=$(git branch -r --contains "$TAG_NAME" | grep -v '\->' | grep -v 'origin/HEAD' | sed 's|origin/||' | head -n 1)
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Exit if branch is main (protected)
        if: steps.info.outputs.branch == 'main'
        run: |
          echo "Cannot automatically update version and package release on protected branch 'main'."
          exit 1

      - name: Checkout specific branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.info.outputs.branch }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'

      - name: Check package.json version matches tag
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION=${{ steps.info.outputs.tag }}
          TAG_VERSION_CLEAN=${TAG_VERSION#v}

          echo "Current version in package.json: $CURRENT_VERSION"
          echo "Tag version (clean): $TAG_VERSION_CLEAN"

          if [ "$CURRENT_VERSION" != "$TAG_VERSION_CLEAN" ]; then
            echo "ERROR: package.json version ($CURRENT_VERSION) does not match tag version ($TAG_VERSION_CLEAN)."
            echo "Please update package.json version before tagging a release."
            exit 1
          else
            echo "Version matches tag."
          fi

      - name: Move tag to latest commit if version bumped
        if: steps.version_check.outputs.skip_bump == 'false'
        run: |
          git tag -d ${{ steps.info.outputs.tag }}
          git push origin :refs/tags/${{ steps.info.outputs.tag }}
          git tag ${{ steps.info.outputs.tag }}
          git push origin ${{ steps.info.outputs.tag }}

  build-and-release:
    needs: check-tag
    name: Build and Release Package
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'

      - name: Setup GitHub Actions user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies in root
        run: yarn install --frozen-lockfile

      - name: Install dependencies in renderer
        run: yarn install --frozen-lockfile
        working-directory: ./src/renderer

      - name: Build package
        run: yarn package --publish never

      - name: Upload Artifacts to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: true
          files: |
            dist/package/*.exe
            dist/package/*.dmg
            dist/package/*.AppImage
            dist/package/*.deb
            dist/package/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
