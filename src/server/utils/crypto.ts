/**
 * Encrypt and decrypt data using keys generated by device ID.
 */
import * as crypto from 'crypto';
import { machineIdSync } from 'node-machine-id';
import { generateKeyFromDeviceId } from './crypto-key';

// Encrypt algorithm and IV length
const ALGORITHM = 'aes-256-cbc';
const IV_LENGTH = 16;

const DEVICE_ID = machineIdSync();
const ENCRYPTION_KEY = generateKeyFromDeviceId(DEVICE_ID);

export function encryptJson(data: object): string {
  const iv = crypto.randomBytes(IV_LENGTH);
  const CIPHER = crypto.createCipheriv(ALGORITHM, ENCRYPTION_KEY, iv);
  const jsonData = JSON.stringify(data);

  const encrypted = Buffer.concat([
    CIPHER.update(jsonData, 'utf-8'),
    CIPHER.final(),
  ]);

  return iv.toString('hex') + ':' + encrypted.toString('hex');
}

export function decryptJson(encryptedData: string): object | null {
  try {
    const [ivHex, encryptedHex] = encryptedData.split(':');
    const iv = Buffer.from(ivHex, 'hex');
    const encryptedText = Buffer.from(encryptedHex, 'hex');

    const decipher = crypto.createDecipheriv(ALGORITHM, ENCRYPTION_KEY, iv);

    const decrypted = Buffer.concat([
      decipher.update(encryptedText),
      decipher.final(),
    ]);

    return JSON.parse(decrypted.toString('utf-8'));
  } catch (e) {
    console.error('Decryption failed: ', e);
    return null;
  }
}
