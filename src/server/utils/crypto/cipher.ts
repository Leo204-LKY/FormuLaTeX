/**
 * Encrypt and decrypt data using keys generated by device ID.
 */
import * as crypto from 'crypto';
import { machineIdSync } from 'node-machine-id';
import { generateKey } from './key-generator';
import * as fs from 'fs';
import * as path from 'path';
import { getRandomStr } from '../random-str';

// Encrypt algorithm and IV length
const ALGORITHM = 'aes-256-cbc';
const IV_LENGTH = 16;

const DEVICE_ID = machineIdSync();
const ENCRYPTION_KEY = generateKey(DEVICE_ID);

/**
 * Encrypt Json object
 * @param data Data to be encrypted
 * @param key Encryption key, default is generated by device ID
 * @param iv Encryption IV, default is random generated bytes
 * @returns Encrypted string separated with ':' - {iv}:{encrypted data}
 */
export function encryptJson(
  data: object,
  key: crypto.CipherKey = ENCRYPTION_KEY,
  iv: string = getRandomStr(IV_LENGTH)
): string {
  const ivBuffer = Buffer.from(iv, 'utf-8');
  const CIPHER = crypto.createCipheriv(ALGORITHM, key, ivBuffer);
  const jsonData = JSON.stringify(data);

  const encrypted = Buffer.concat([
    CIPHER.update(jsonData, 'utf-8'),
    CIPHER.final(),
  ]);

  return ivBuffer.toString('hex') + ':' + encrypted.toString('hex');
}

/**
 * Decrypt data into Json object
 * @param encryptedData Encrypted Json data separated with ':' - {iv}:{encrypted data}
 * @param key Decryption key, default is generated by device ID
 * @returns Decrypted Json object
 */
export function decryptJson(
  encryptedData: string,
  key: crypto.CipherKey = ENCRYPTION_KEY
): object | null {
  try {
    const [ivHex, encryptedHex] = encryptedData.split(':');
    const ivBuffer = Buffer.from(ivHex, 'hex');
    const encryptedText = Buffer.from(encryptedHex, 'hex');

    const decipher = crypto.createDecipheriv(ALGORITHM, key, ivBuffer);

    const decrypted = Buffer.concat([
      decipher.update(encryptedText),
      decipher.final(),
    ]);

    return JSON.parse(decrypted.toString('utf-8'));
  } catch (e) {
    console.error('Decryption failed: ', e);
    return null;
  }
}

/**
 * Encrypt file
 * @param filePath File to be encrypted
 * @param encryptPath Encrypted file output path
 * @param key Encryption key, default is generated by device ID
 * @param iv Encryption IV, default is random generated bytes
 * @param writeMode The permission of decrypted file
 */
export function encryptFile(
  filePath: string,
  encryptPath: string,
  key: crypto.CipherKey = ENCRYPTION_KEY,
  iv: string = getRandomStr(IV_LENGTH),
  writeMode?: fs.Mode
): string {
  try {
    const fileData = fs.readFileSync(filePath);
    const ivBuffer = Buffer.from(iv, 'utf-8');

    const cipher = crypto.createCipheriv(ALGORITHM, key, ivBuffer);

    const encrypted = Buffer.concat([cipher.update(fileData), cipher.final()]);

    // Ensure the directory exists
    const dir = path.dirname(encryptPath);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }

    fs.writeFileSync(encryptPath, iv + encrypted.toString('binary'), {
      encoding: 'binary',
      mode: writeMode,
    });
    console.log(`File encrypted successfully to: ${encryptPath}`);
    return iv;
  } catch (e) {
    console.error('File encryption failed: ', e);
    throw new Error('File Encryption Failed: \n' + e);
  }
}

/**
 * Decrypt encrypted file (IV read from file header)
 * @param encryptedPath Encrypted file path
 * @param decryptPath Decrypted file output path
 * @param key Decrypt key
 * @param writeMode The permission of decrypted file
 */
export function decryptFile(
  encryptedPath: string,
  decryptPath: string,
  key: crypto.CipherKey = ENCRYPTION_KEY,
  writeMode?: fs.Mode
): void {
  try {
    const encryptedData = fs.readFileSync(encryptedPath);
    const ivBuffer = encryptedData.subarray(0, IV_LENGTH);
    const cipherText = encryptedData.subarray(IV_LENGTH);

    const decipher = crypto.createDecipheriv(ALGORITHM, key, ivBuffer);
    const decrypted = Buffer.concat([
      decipher.update(cipherText),
      decipher.final(),
    ]);

    fs.writeFileSync(decryptPath, decrypted, { mode: writeMode });
    console.log(`File decrypted successfully to: ${decryptPath}`);
  } catch (e) {
    console.error('File decryption failed: ', e);
    throw new Error('File Encryption Failed: \n' + e);
  }
}
